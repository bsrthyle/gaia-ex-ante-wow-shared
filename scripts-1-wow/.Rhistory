# soils (to correct extent)
ref <- terra::rast(paste0(input_path, 'soilgrids_properties_all.tif'))[[1]]
ref <- terra::aggregate(ref, 10, 'mean', na.rm=T)
# crops
spam <- c('MAIZ', 'SORG', 'BEAN', 'CHIC', 'LENT', 'WHEA', 'BARL', 'ACOF', 'RCOF', 'PMIL', 'SMIL', 'POTA',
'SWPO', 'CASS', 'COWP', 'PIGE', 'SOYB', 'GROU', 'SUGC', 'COTT', 'COCO', 'TEAS', 'TOBA')
spam
# spam
for(sv in c('harv_area', 'prod', 'yield')){   # val_prod
print(sv)
variable <- lapply(spam, function(crop){geodata::crop_spam(crop, sv, path=input_path)[[1]]})   # africa=T,
variable <- terra::rast(variable)
names(variable) <- spam
variable <- terra::crop(variable, ssa, mask=T)
variable <- terra::resample(variable, ref)
terra::writeRaster(variable, paste0(input_path, 'spam_', sv, '_processed.tif'), overwrite=T)
}
spam <- c('MAIZ', 'SORG', 'BEAN', 'CHIC', 'LENT', 'WHEA', 'BARL', 'ACOF', 'RCOF', 'PMIL', 'SMIL', 'POTA',
'SWPO', 'CASS', 'COWP', 'PIGE', 'SOYB', 'GROU', 'SUGC', 'COTT', 'COCO', 'TEAS', 'TOBA')
variable
terra::plot(variable$MAIZ)
# directories
input_path <- paste0(here::here(), '/data-input/')
# soil-grids
sprops_cropland <- terra::rast(paste0(input_path, 'soilgrids_properties_cropland.tif'))
terra::plot(sprops_cropland$ca)
names(sprops_cropland)
# soil-grids
sprops_cropland <- terra::rast(paste0(input_path, 'soilgrids_properties_cropland.tif'))
sprops_cropland <- sprops_cropland[[c(3,4,5,6,7,1)]]
names(sprops_cropland) <- c('exch_ac', 'exch_k', 'exch_Ca', 'exch_mg', 'exch_na', 'SBD')
sprops_cropland
# acidity saturation
hp_sat <- terra::rast(paste0(input_path, 'soilgrids_properties_cropland.tif'))[[c(10)]]
hp_sat
hp_sat_acid <- terra::classify(hp_sat, rcl=cbind(-1, 10, 0))
hp_sat_acid
hp_sat_acid <- terra::ifel(hp_sat_acid != 0, 1, hp_sat_acid)
hp_sat_acid
terra::plot(hp_sat_acid)
# kamprath: year 1
caco3_kamprath <- limer::limeRate(sprops_cropland, method='ka', check_Ca=F, unit='t/ha', SD=20)
caco3_kamprath
terra::plot(caco3_kamprath)
caco3_kamprath_filter <- caco3_kamprath * hp_sat_acid # for soils with exch acidity saturation > 10% only
terra::plot(caco3_kamprath_filter)
caco3_kamprath_filter <- caco3_kamprath * hp_sat_acid # for soils with exch acidity saturation > 10% only
terra::plot(caco3_kamprath_filter)
terra::plot(caco3_kamprath)
hp_sat <- terra::rast(paste0(input_path, 'soilgrids_properties_cropland.tif'))[[c(10)]]
hp_sat_acid <- terra::classify(hp_sat, rcl=cbind(-1, 10, 0))
hp_sat_acid <- terra::ifel(hp_sat_acid != 0, 1, hp_sat_acid)
terra::plot(hp_sat_acid)
terra::plot(caco3_kamprath)
terra::plot(caco3_kamprath_filter)
caco3_kamprath_filter[caco3_kamprath_filter==0] <- NA
terra::plot(caco3_kamprath_filter)
caco3_kamprath[caco3_kamprath==0] <- NA
terra::plot(caco3_kamprath)
# kamprath: year 1
caco3_kamprath <- limer::limeRate(sprops_cropland, method='ka', check_Ca=F, unit='t/ha', SD=20)
caco3_kamprath_filter <- caco3_kamprath * hp_sat_acid # for soils with exch acidity saturation > 10% only
terra::writeRaster(caco3_kamprath_filter, paste0(input_path, 'caco3_kamprath.tif'), overwrite=T)
# cochrane: year 1
tas <- c(0, 5, 10, 15, 20, 25, 30, 35, 40)
caco3_cochrane <- lapply(tas, function(t){
cochrane <- limer::limeRate(sprops_cropland, method='co', check_Ca=F, unit='t/ha', SD=20, TAS=t)
names(cochrane) <- paste0('cochrane_', t)
cochrane})
caco3_cochrane <- terra::rast(caco3_cochrane)
terra::writeRaster(caco3_cochrane, paste0(input_path, 'caco3_cochrane.tif'), overwrite=T)
caco3_cochrane
# aramburu-merlos: year 1
tas <- c(0, 5, 10, 15, 20, 25, 30, 35, 40)
caco3_merlos <- lapply(tas, function(t){
merlos <- limer::limeRate(sprops_cropland, method='my', check_Ca=F, unit='t/ha', SD=20, TAS=t)
names(merlos) <- paste0('merlos_', t)
merlos})
caco3_merlos <- terra::rast(caco3_merlos)
terra::writeRaster(caco3_merlos, paste0(input_path, 'caco3_merlos.tif'), overwrite=T)
# aramburu-merlos: maintenance
sprops_maintenance <- terra::rast(paste0(input_path, 'soilgrids_properties_cropland.tif'))
sprops_maintenance <- sprops_maintenance[[c(3,4,5,6,7,1,9)]]
names(sprops_maintenance) <- c('exch_ac', 'exch_k', 'exch_Ca', 'exch_mg', 'exch_na', 'SBD', 'ecec')
acidification=0; decay=0.22; tas <- c(0, 5, 10, 15, 20, 25, 30, 35, 40)
acidification=0; decay=0.22; tas <- c(0, 5, 10, 15, 20, 25, 30, 35, 40)
# aramburu-merlos: maintenance
sprops_maintenance <- terra::rast(paste0(input_path, 'soilgrids_properties_cropland.tif'))
sprops_maintenance <- sprops_maintenance[[c(3,4,5,6,7,1,9)]]
names(sprops_maintenance) <- c('exch_ac', 'exch_k', 'exch_Ca', 'exch_mg', 'exch_na', 'SBD', 'ecec')
acidification=0; decay=0.22; tas <- c(0, 5, 10, 15, 20, 25, 30, 35, 40)
caco3_merlos_maintenance <- lapply(tas, function(t){
maint_lime <- sprops_maintenance
exal <- (maint_lime$ecec * t) / 100 # corresponding ex_ac for a given tas
maint_lime$exch_ac <- min(maint_lime$exch_ac, exal + decay + acidification)
merlos <- limer::limeRate(maint_lime[[1:6]], method='my', check_Ca=F, unit='t/ha', SD=20, TAS=t)
names(merlos) <- paste0('merlos_', t)
merlos})
caco3_merlos_maintenance <- terra::rast(caco3_merlos_maintenance)
terra::writeRaster(caco3_merlos_maintenance, paste0(input_path, 'caco3_merlos_maintenance.tif'), overwrite=T)
# directories
input_path <- paste0(here::here(), '/data-input/')
output_path <- paste0(here::here(), '/data-output/')
# crop types
crop_types <- data.frame(crop=c("MAIZ", "SORG", "BEAN", "CHIC", 'LENT', "WHEA", "BARL", "ACOF", "RCOF", 'PMIL', 'SMIL', 'POTA', 'SWPO', 'CASS', 'COWP', 'PIGE', 'SOYB', 'GROU', 'SUGC', 'COTT', 'COCO', 'TEAS', 'TOBA'),
type=c('Cereal', "Cereal", "Legume", "Legume", 'Legume', "Cereal", "Cereal", "Commodity", "Commodity", 'Cereal', 'Cereal', 'RTBs', 'RTBs', 'RTBs', 'Legume', 'Legume', 'Legume', 'Legume', 'Commodity', 'Commodity', 'Commodity', 'Commodity', 'Commodity'))
crop_types
write.csv(crop_types, paste0(input_path, 'crop_types.csv'))
par(mfrow=c(1,2), mar=c(4.5,5,1,1), xaxs='i', yaxs='i', las=1, cex.main=1.5, cex.lab=1.4, cex.axis=1.3)
# acidity
crops_df <- readxl::read_excel(paste0(input_path, '# ecocrop_parameters_hp_final.xlsx'))
crops_df
crops_df <- crops_df[c(1,2,9,10)]
crops_df
names(crops_df)[3:4] <- c('ac_sat', 'max_ac_sat')
write.csv(crops_df, paste0(input_path, 'ecocrop_parameters_hp.csv'))
crops_df <- merge(crops_df, crop_types, by.x='spam', by.y='crop')
crops_df <- unique(crops_df[c(3:5)])
crops_df$crop <- c('coffee', 'maize', 'bean', 'cassava', 'sugarcane', 'cowpea', 'potato', 'sweet potato')
plot(NULL, xlim=c(0,100), ylim=c(0,1.05), xlab='Acidity saturation (% ECEC)', ylab='Relative yield (-)', main='')
grid(nx=10, ny=10)
j <- 1
txt <- c()
col <- c()
for(tp in unique(crops_df$crop)){
col_crop <- viridis::viridis(nrow(crops_df)*2)[j]
croptype <- subset(crops_df, crop == tp)
croptype <- reshape2::melt(croptype, id.vars=c('type', 'crop'))
croptype$yield <- ifelse(croptype$variable == 'ac_sat', 1, 0)
lines(x=c(0, croptype$value), y=c(1, croptype$yield), lwd=2.5, col=col_crop)
j <- j + 2
txt <- c(txt, tp)
col <- c(col, col_crop)}
legend('topright', cex=0.9, legend=txt, lty=1, col=col, lwd=2.5)
crops_df <- merge(crops_df, crop_types, by.x='spam', by.y='crop')
par(mfrow=c(1,2), mar=c(4.5,5,1,1), xaxs='i', yaxs='i', las=1, cex.main=1.5, cex.lab=1.4, cex.axis=1.3)
# acidity
crops_df <- readxl::read_excel(paste0(input_path, '# ecocrop_parameters_hp_final.xlsx'))
crops_df <- crops_df[c(1,2,9,10)]
names(crops_df)[3:4] <- c('ac_sat', 'max_ac_sat')
write.csv(crops_df, paste0(input_path, 'ecocrop_parameters_hp.csv'))
# ------------------------------------------------------------------------------
# directories
input_path <- paste0(here::here(), '/data-input/')
output_path <- paste0(here::here(), '/data-output/')
# ------------------------------------------------------------------------------
# crop types
crop_types <- data.frame(crop=c("MAIZ", "SORG", "BEAN", "CHIC", 'LENT', "WHEA", "BARL", "ACOF", "RCOF", 'PMIL', 'SMIL', 'POTA', 'SWPO', 'CASS', 'COWP', 'PIGE', 'SOYB', 'GROU', 'SUGC', 'COTT', 'COCO', 'TEAS', 'TOBA'),
type=c('Cereal', "Cereal", "Legume", "Legume", 'Legume', "Cereal", "Cereal", "Commodity", "Commodity", 'Cereal', 'Cereal', 'RTBs', 'RTBs', 'RTBs', 'Legume', 'Legume', 'Legume', 'Legume', 'Commodity', 'Commodity', 'Commodity', 'Commodity', 'Commodity'))
write.csv(crop_types, paste0(input_path, 'crop_types.csv'))
# ------------------------------------------------------------------------------
par(mfrow=c(1,2), mar=c(4.5,5,1,1), xaxs='i', yaxs='i', las=1, cex.main=1.5, cex.lab=1.4, cex.axis=1.3)
# acidity
crops_df <- readxl::read_excel(paste0(input_path, '# ecocrop_parameters_hp_final.xlsx'))
crops_df <- crops_df[c(1,2,9,10)]
names(crops_df)[3:4] <- c('ac_sat', 'max_ac_sat')
write.csv(crops_df, paste0(input_path, 'ecocrop_parameters_hp.csv'))
crops_df <- merge(crops_df, crop_types, by.x='spam', by.y='crop')
crops_df <- unique(crops_df[c(3:5)])
crops_df$crop <- c('coffee', 'maize', 'bean', 'cassava', 'sugarcane', 'cowpea', 'potato', 'sweet potato')
plot(NULL, xlim=c(0,100), ylim=c(0,1.05), xlab='Acidity saturation (% ECEC)', ylab='Relative yield (-)', main='')
grid(nx=10, ny=10)
j <- 1
txt <- c()
col <- c()
for(tp in unique(crops_df$crop)){
col_crop <- viridis::viridis(nrow(crops_df)*2)[j]
croptype <- subset(crops_df, crop == tp)
croptype <- reshape2::melt(croptype, id.vars=c('type', 'crop'))
croptype$yield <- ifelse(croptype$variable == 'ac_sat', 1, 0)
lines(x=c(0, croptype$value), y=c(1, croptype$yield), lwd=2.5, col=col_crop)
j <- j + 2
txt <- c(txt, tp)
col <- c(col, col_crop)}
legend('topright', cex=0.9, legend=txt, lty=1, col=col, lwd=2.5)
# pH
crops_df <- data.frame(spam=c("MAIZ", "SORG", "BEAN", "CHIC", 'LENT', "WHEA", "BARL", "ACOF", "RCOF", 'PMIL', 'SMIL', 'POTA', 'SWPO', 'CASS', 'COWP', 'PIGE', 'SOYB', 'GROU', 'SUGC', 'COTT', 'COCO', 'TEAS', 'TOBA'),
ecocrop=c('Maize', "Sorghum (med. altitude)", "Bean, Common", "Chick pea", 'Lentil', "Wheat, common", "Barley", "Coffee arabica", "Coffee robusta", 'Pearl millet', 'Finger millet', 'Potato', 'Sweet potato', 'Cassava', 'Cowpea', 'Pigeon Pea', 'Soyabean', 'Groundnut', 'Saccharum officinarum L.', 'Cotton, American upland', 'Cacao', 'Tea', 'Tobacco'),
min_ph=c(4.5, 4.5, 5.0, 5.0, 5.0, 4.5, 4.5, 4.0, 4.0, 4.5, 4.5, 4.0, 4.0, 4.0, 5.0, 5.0, 5.0, 5.0, 4.0, 4.5, 4.0, 4.0, 4.5),
max_ph=5.5)
write.csv(crops_df, paste0(input_path, 'ecocrop_parameters_ph.csv'))
crops_df <- merge(crops_df, crop_types, by.x='spam', by.y='crop')
crops_df <- unique(crops_df[c(3:5)])
crops_df$crop1 <- c('coffee', 'maize', 'bean', 'cassava', 'tobacco')
crops_df$crop <- c('coffee+cassava', 'maize+tobacco', 'bean', NA, NA)
crops_df <- na.omit(crops_df[-c(4)])
plot(NULL, xlim=c(3.5,6), ylim=c(0,1.05), xlab='Soil pH in water', ylab='Relative yield (-)', main='')
grid(nx=10, ny=10)
j <- 1
txt <- c()
col <- c()
for(tp in unique(crops_df$crop)){
col_crop <- viridis::viridis(nrow(crops_df)*2)[j]
croptype <- subset(crops_df, crop == tp)
croptype <- reshape2::melt(croptype, id.vars=c('type', 'crop'))
croptype$yield <- ifelse(croptype$variable == 'max_ph', 1, 0)
lines(x=c(0, croptype$value, 7), y=c(0, croptype$yield, 1), lwd=2.5, col=col_crop)
j <- j + 2
txt <- c(txt, tp)
col <- c(col, col_crop)}
legend('topleft', cex=0.9, legend=txt, lty=1, col=col, lwd=2.5)
# ------------------------------------------------------------------------------
# directories
input_path <- paste0(here::here(), '/data-input/')
output_path <- paste0(here::here(), '/data-output/')
# ------------------------------------------------------------------------------
# crop types
crop_types <- data.frame(crop=c("MAIZ", "SORG", "BEAN", "CHIC", 'LENT', "WHEA", "BARL", "ACOF", "RCOF", 'PMIL', 'SMIL', 'POTA', 'SWPO', 'CASS', 'COWP', 'PIGE', 'SOYB', 'GROU', 'SUGC', 'COTT', 'COCO', 'TEAS', 'TOBA'),
type=c('Cereal', "Cereal", "Legume", "Legume", 'Legume', "Cereal", "Cereal", "Commodity", "Commodity", 'Cereal', 'Cereal', 'RTBs', 'RTBs', 'RTBs', 'Legume', 'Legume', 'Legume', 'Legume', 'Commodity', 'Commodity', 'Commodity', 'Commodity', 'Commodity'))
write.csv(crop_types, paste0(input_path, 'crop_types.csv'))
# ------------------------------------------------------------------------------
# figure
png(paste0(output_path, "crop-parameters-1.png"), units="in", width=11.3, height=5.5, res=1000)
par(mfrow=c(1,2), mar=c(4.5,5,1,1), xaxs='i', yaxs='i', las=1, cex.main=1.5, cex.lab=1.4, cex.axis=1.3)
# acidity
crops_df <- readxl::read_excel(paste0(input_path, '# ecocrop_parameters_hp_final.xlsx'))
crops_df <- crops_df[c(1,2,9,10)]
names(crops_df)[3:4] <- c('ac_sat', 'max_ac_sat')
write.csv(crops_df, paste0(input_path, 'ecocrop_parameters_hp.csv'))
crops_df <- merge(crops_df, crop_types, by.x='spam', by.y='crop')
crops_df <- unique(crops_df[c(3:5)])
crops_df$crop <- c('coffee', 'maize', 'bean', 'cassava', 'sugarcane', 'cowpea', 'potato', 'sweet potato')
plot(NULL, xlim=c(0,100), ylim=c(0,1.05), xlab='Acidity saturation (% ECEC)', ylab='Relative yield (-)', main='')
grid(nx=10, ny=10)
j <- 1
txt <- c()
col <- c()
for(tp in unique(crops_df$crop)){
col_crop <- viridis::viridis(nrow(crops_df)*2)[j]
croptype <- subset(crops_df, crop == tp)
croptype <- reshape2::melt(croptype, id.vars=c('type', 'crop'))
croptype$yield <- ifelse(croptype$variable == 'ac_sat', 1, 0)
lines(x=c(0, croptype$value), y=c(1, croptype$yield), lwd=2.5, col=col_crop)
j <- j + 2
txt <- c(txt, tp)
col <- c(col, col_crop)}
legend('topright', cex=0.9, legend=txt, lty=1, col=col, lwd=2.5)
# pH
crops_df <- data.frame(spam=c("MAIZ", "SORG", "BEAN", "CHIC", 'LENT', "WHEA", "BARL", "ACOF", "RCOF", 'PMIL', 'SMIL', 'POTA', 'SWPO', 'CASS', 'COWP', 'PIGE', 'SOYB', 'GROU', 'SUGC', 'COTT', 'COCO', 'TEAS', 'TOBA'),
ecocrop=c('Maize', "Sorghum (med. altitude)", "Bean, Common", "Chick pea", 'Lentil', "Wheat, common", "Barley", "Coffee arabica", "Coffee robusta", 'Pearl millet', 'Finger millet', 'Potato', 'Sweet potato', 'Cassava', 'Cowpea', 'Pigeon Pea', 'Soyabean', 'Groundnut', 'Saccharum officinarum L.', 'Cotton, American upland', 'Cacao', 'Tea', 'Tobacco'),
min_ph=c(4.5, 4.5, 5.0, 5.0, 5.0, 4.5, 4.5, 4.0, 4.0, 4.5, 4.5, 4.0, 4.0, 4.0, 5.0, 5.0, 5.0, 5.0, 4.0, 4.5, 4.0, 4.0, 4.5),
max_ph=5.5)
write.csv(crops_df, paste0(input_path, 'ecocrop_parameters_ph.csv'))
crops_df <- merge(crops_df, crop_types, by.x='spam', by.y='crop')
crops_df <- unique(crops_df[c(3:5)])
crops_df$crop1 <- c('coffee', 'maize', 'bean', 'cassava', 'tobacco')
crops_df$crop <- c('coffee+cassava', 'maize+tobacco', 'bean', NA, NA)
crops_df <- na.omit(crops_df[-c(4)])
plot(NULL, xlim=c(3.5,6), ylim=c(0,1.05), xlab='Soil pH in water', ylab='Relative yield (-)', main='')
grid(nx=10, ny=10)
j <- 1
txt <- c()
col <- c()
for(tp in unique(crops_df$crop)){
col_crop <- viridis::viridis(nrow(crops_df)*2)[j]
croptype <- subset(crops_df, crop == tp)
croptype <- reshape2::melt(croptype, id.vars=c('type', 'crop'))
croptype$yield <- ifelse(croptype$variable == 'max_ph', 1, 0)
lines(x=c(0, croptype$value, 7), y=c(0, croptype$yield, 1), lwd=2.5, col=col_crop)
j <- j + 2
txt <- c(txt, tp)
col <- c(col, col_crop)}
legend('topleft', cex=0.9, legend=txt, lty=1, col=col, lwd=2.5)
dev.off()
# ------------------------------------------------------------------------------
?png
# directories
input_path <- paste0(here::here(), '/data-input/')
output_path <- paste0(here::here(), '/data-output/')
# ------------------------------------------------------------------------------
sprops_cropland <- terra::rast(paste0(input_path, 'soilgrids_properties_cropland.tif'))
sprops_cropland <- sprops_cropland[[c(2, 10)]]
names(sprops_cropland) <- c("ph", "hp")
sprops_cropland
crops_df <- read.csv(paste0(input_path, 'ecocrop_parameters_hp.csv'))
crops_df
response <- 'hp'
crops_df <- read.csv(paste0(input_path, 'ecocrop_parameters_', response, '.csv'))
paste0(input_path, 'ecocrop_parameters_', response, '.csv')
crop <- 'MAIZ'
subset_crops <- subset(crops_df, spam == crop)
subset_crops
ecocrop_crop <- Recocrop::ecocropPars(subset_crops$ecocrop)
ecocrop_crop
properties
properties <- sprops_cropland
properties
properties[[response]]
svar <- "max_ac_sat"
svar
p <- subset_crops[[svar]]
p
subset_crops
pars1 <- c(-Inf, -Inf, subset_crops$ac_sat, max_ac_sat=p)
pars1
subset_crops
p
pars1 <- c(-Inf, -Inf, subset_crops$ac_sat, max_ac_sat=p)
pars1
pars <- pars1
pars
pars[[svar]] <- pars1[[svar]] - parameter
parameter=0
pars[[svar]] <- pars1[[svar]] - parameter
pars
ecocrop_crop$parameters <- cbind(ecocrop_crop$parameters, pars)
ecocrop_crop
colnames(ecocrop_crop$parameters)[6] <- "response"
ecocrop_crop
model <- Recocrop::ecocrop(ecocrop_crop)
model
?Recocrop::ecocrop
Recocrop::plot(model)
model <- Recocrop::ecocrop(ecocrop_crop)
model
# Recocrop::plot(model)
Recocrop::control(model, get_max=T)
Recocrop
yield_loss <- Recocrop::predict(model, response=sprop)
sprop <- properties[[response]]
yield_loss <- Recocrop::predict(model, response=sprop)
yield_loss
terra::plot(yield_loss)
dev.off()
terra::plot(yield_loss)
yield_loss <- terra::clamp(yield_loss, 0.2, 1)
terra::plot(yield_loss)
names(yield_loss) <- paste0(crop, '_', response)
yield_loss
response <- 'ph'
crop <- 'MAIZ'
properties <- sprops_cropland
crops_df <- read.csv(paste0(input_path, 'ecocrop_parameters_', response, '.csv'))
subset_crops <- subset(crops_df, spam == crop)
ecocrop_crop <- Recocrop::ecocropPars(subset_crops$ecocrop)
sprop <- properties[[response]]
if(response == 'hp'){
svar <- "max_ac_sat"
p <- subset_crops[[svar]]
pars1 <- c(-Inf, -Inf, subset_crops$ac_sat, max_ac_sat=p)
} else { # ph
svar <- "min_ph"
p <- subset_crops[[svar]]
pars1 <- c(min_ph=p, subset_crops$max_ph, Inf, Inf)
}
pars <- pars1
pars[[svar]] <- pars1[[svar]] - parameter
pars
ecocrop_crop$parameters <- cbind(ecocrop_crop$parameters, pars)
colnames(ecocrop_crop$parameters)[6] <- "response"
model <- Recocrop::ecocrop(ecocrop_crop)
# Recocrop::plot(model)
Recocrop::control(model, get_max=T)
yield_loss <- Recocrop::predict(model, response=sprop)
terra::plot(yield_loss)
# yield-loss-function
ecocrop_f <- function(crop, response, properties, parameter=0) {
crops_df <- read.csv(paste0(input_path, 'ecocrop_parameters_', response, '.csv'))
subset_crops <- subset(crops_df, spam == crop)
ecocrop_crop <- Recocrop::ecocropPars(subset_crops$ecocrop)
sprop <- properties[[response]]
if(response == 'hp'){
svar <- "max_ac_sat"
p <- subset_crops[[svar]]
pars1 <- c(-Inf, -Inf, subset_crops$ac_sat, max_ac_sat=p)
} else { # ph
svar <- "min_ph"
p <- subset_crops[[svar]]
pars1 <- c(min_ph=p, subset_crops$max_ph, Inf, Inf)
}
pars <- pars1
pars[[svar]] <- pars1[[svar]] - parameter
ecocrop_crop$parameters <- cbind(ecocrop_crop$parameters, pars)
colnames(ecocrop_crop$parameters)[6] <- "response"
model <- Recocrop::ecocrop(ecocrop_crop)
# Recocrop::plot(model)
Recocrop::control(model, get_max=T)
yield_loss <- Recocrop::predict(model, response=sprop)
yield_loss <- terra::clamp(yield_loss, 0.2, 1)
names(yield_loss) <- paste0(crop, '_', response)
return(yield_loss)
}
unique(crops_df$spam)
# run
param <- 0
for(crop in unique(crops_df$spam)){
for(resp in c('hp', 'ph')){
print(paste0(crop, '_', resp))
yield_loss <- ecocrop_f(crop=crop, response=resp, properties=sprops_cropland, parameter=param)
terra::writeRaster(yield_loss, paste0(input_path, 'ecocrop_yieldloss/', resp, '_crop_suitability_', crop, '_', param, '.tif'), overwrite=T)
}
}
# crops
crops_df <- read.csv(paste0(input_path, 'ecocrop_parameters_hp.csv'))
unique(crops_df$spam)
crop <- 'RICE'
crops_df <- read.csv(paste0(input_path, 'ecocrop_parameters_', response, '.csv'))
crops_df
subset_crops <- subset(crops_df, spam == crop)
subset_crops
response <- 'ph'
crop <- 'RICE'
crops_df <- read.csv(paste0(input_path, 'ecocrop_parameters_', response, '.csv'))
subset_crops <- subset(crops_df, spam == crop)
subset_crops
response <- 'hp'
crop <- 'RICE'
crops_df <- read.csv(paste0(input_path, 'ecocrop_parameters_', response, '.csv'))
crops_df
response <- 'hp'
crop <- 'RICE'
crops_df <- read.csv(paste0(input_path, 'ecocrop_parameters_', response, '.csv'))
subset_crops <- subset(crops_df, spam == crop)
subset_crops
ecocrop_crop <- Recocrop::ecocropPars(subset_crops$ecocrop)
sprop <- properties[[response]]
sprop
if(response == 'hp'){
svar <- "max_ac_sat"
p <- subset_crops[[svar]]
pars1 <- c(-Inf, -Inf, subset_crops$ac_sat, max_ac_sat=p)
} else { # ph
svar <- "min_ph"
p <- subset_crops[[svar]]
pars1 <- c(min_ph=p, subset_crops$max_ph, Inf, Inf)
}
pars <- pars1
pars[[svar]] <- pars1[[svar]] - parameter
pars
ecocrop_crop$parameters <- cbind(ecocrop_crop$parameters, pars)
colnames(ecocrop_crop$parameters)[6] <- "response"
model <- Recocrop::ecocrop(ecocrop_crop)
Recocrop::plot(model)
# Recocrop::plot(model)
Recocrop::control(model, get_max=T)
yield_loss <- Recocrop::predict(model, response=sprop)
# crops
crops_df <- read.csv(paste0(input_path, 'ecocrop_parameters_ph.csv'))
unique(crops_df$spam)
# directories
input_path <- paste0(here::here(), '/data-input/')
output_path <- paste0(here::here(), '/data-output/')
# ------------------------------------------------------------------------------
# soil-grids
sprops_cropland <- terra::rast(paste0(input_path, 'soilgrids_properties_cropland.tif'))
sprops_cropland <- sprops_cropland[[c(2, 10)]]
names(sprops_cropland) <- c("ph", "hp")
# crops
crops_df <- read.csv(paste0(input_path, 'ecocrop_parameters_ph.csv')) # load ph because there is no rice pars
# yield-loss-function
ecocrop_f <- function(crop, response, properties, parameter=0) {
crops_df <- read.csv(paste0(input_path, 'ecocrop_parameters_', response, '.csv'))
subset_crops <- subset(crops_df, spam == crop)
ecocrop_crop <- Recocrop::ecocropPars(subset_crops$ecocrop)
sprop <- properties[[response]]
if(response == 'hp'){
svar <- "max_ac_sat"
p <- subset_crops[[svar]]
pars1 <- c(-Inf, -Inf, subset_crops$ac_sat, max_ac_sat=p)
} else { # ph
svar <- "min_ph"
p <- subset_crops[[svar]]
pars1 <- c(min_ph=p, subset_crops$max_ph, Inf, Inf)
}
pars <- pars1
pars[[svar]] <- pars1[[svar]] - parameter
ecocrop_crop$parameters <- cbind(ecocrop_crop$parameters, pars)
colnames(ecocrop_crop$parameters)[6] <- "response"
model <- Recocrop::ecocrop(ecocrop_crop)
# Recocrop::plot(model)
Recocrop::control(model, get_max=T)
yield_loss <- Recocrop::predict(model, response=sprop)
yield_loss <- terra::clamp(yield_loss, 0.2, 1)
names(yield_loss) <- paste0(crop, '_', response)
return(yield_loss)
}
# run
param <- 0
for(crop in unique(crops_df$spam)){
for(resp in c('hp', 'ph')){
print(paste0(crop, '_', resp))
yield_loss <- ecocrop_f(crop=crop, response=resp, properties=sprops_cropland, parameter=param)
terra::writeRaster(yield_loss, paste0(input_path, 'ecocrop_yieldloss/', resp, '_crop_suitability_', crop, '_', param, '.tif'), overwrite=T)
}
}
input_path <- paste0(here::here(), '/data-input/')
output_path <- paste0(here::here(), '/data-output/')
# yield-spam
crop_yield <- terra::rast(paste0(input_path, "spam_yield_processed.tif")) / 1000
# yield-response
resp <- c('hp', 'ph')
x <- lapply(resp, function(response){
loss <- terra::rast(Sys.glob(paste0(input_path, 'ecocrop_yieldloss/', response, '_crop_suitability_*_0.tif')))
names(loss) <- gsub('_..$', "", names(loss))
loss_agg <- terra::aggregate(loss, 10, fun='mean', na.rm=T)
resp_tha <- (crop_yield / loss_agg) - crop_yield
terra::writeRaster(resp_tha, paste0(input_path, '/extra_production_', response,'.tif'), overwrite=T)
})
resp_tha
aa <- terra::rast(paste0(input_data, 'extra_production_hp.tif'))
aa <- terra::rast(paste0(input_path, 'extra_production_hp.tif'))
source("C:/Users/JSILVA/OneDrive - CIMMYT/Desktop/ex-ante-analysis/scripts-1-wow/wow-6-crop-yield-response.R", echo=TRUE)
aa
terra::plot(aa$MAIZ)
terra::plot(aa$BEAN)
terra::plot(aa$GROU)
terra::plot(aa$WHEAT)
terra::plot(aa$WHEA)
terra::plot(aa$MAIZ)
hist(aa$MAIZ)
hist(aa$BEAN)
hist(aa$GROU)
